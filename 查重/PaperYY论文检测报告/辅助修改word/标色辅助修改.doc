
<html xmlns:o="urn:schemas-microsoft-com:office:office"xmlns:w="urn:schemas-microsoft-com:office:word"xmlns="http://www.w3.org/TR/REC-html40">
<body>
    <p>    快速文件传递APP的设计与实现&mdash;&mdash;手机与手机互传</p><p>    摘要:随着移动互联网的普及,<span style='color:red;'>移动端设备已经成为大部分人类生活、学习、中作中必不可少的组成部分了。</span>随之而来,往往会碰到人与人之间需要共享某份资料时,受当时环境的限制,比较难以传递,比如网络环境较差的环境下,手机无法联网,或者现有的方式不能满足当时的情况。本文针对这个问题,采用基于wifi的局域网通讯<span style='color:red;'>,设计了Android端文件互传并对文件管理的软件。<br />关键词:Android;文件传输; Socket;局域网;文件管理</span></p><p>    Graphic Designer Design and Implementation of Express File Delivery APP-Delivery Between Mobiles</p><p>    Abstract: With the popularity of mobile Internet, mobile devices have become the majority of human life, learning, in the indispensable part of the. Followed by, often encounter between people need to share a certain information, subject to the constraints of the environment at that time, more difficult to pass, such as the network environment is poor environment, the phone can not be networked, or the existing way can not To meet the situation at that time. This paper for this problem, based on the wifi-based LAN communication, the design of the Android file exchange and file management software.</p><p>    Key words: Android;File delivery;Socket;LAN;File management <br />引言</p><p>    <span style='color:red;'>随着移动互联网时代的到来,数以千万计的移动应用软件被开发出来,丰富了人们的生活,让人与人的沟通变得更加便捷。</span>随之而来往往会碰到人与人之间需要共享某份资料时,受当时环境的限制,比较难以传递,比如网络环境较差的环境下,手机无法联网,或者现有的方式不能满足当时的情况,比如虽然可以通过QQ、微信等主流的社交软件可以传递资料,但临时性的接触不希望当时在QQ、微信上互加好友等等。</p><p>    目前世界上主流的移动开发平台有苹果公司旗下的iOS以及从发布以来便飞速发展的Google旗下的Android。Android是以Linux为基本核心,在其基础上进行精简并且拓展了Linux的基本功能,使其更加简单、易用,以适用移动平台便携、轻量的特点。<span style='color:red;'>Android系统跟iOS系统对比,最主要的特点是开源并且系统是免费的,</span>而且还有完善的文件管理功能,可以与PC相媲美。同时,Android系统具备十分强大的功能扩展,还可以完整的与各大手机厂商应用商店的应用结合。因此,Android从一发布到现在就深受手机用户的欢迎,<span style='color:red;'>Android的应用前景十分广阔。据市场研究公司Strategy Analytics公布的最新数据显示,2016年第三季度,Android手机的全球市场份额达到了创纪录的87.5%。</span>而iOS的市场份额跌至12.1%,可见Android系统占据了全球市场的主导地位。</p><p>    本文的主要研究工作是,围绕Socket通信,基于wifi局域网,针对Android操作系统的核心技术,进行深入开展研究和分析,<span style='color:red;'>根据所学的理论知识,提出文件传输在Android操作系统下实现的设计方案,并最终实现本方案。</span></p><br />第一章 绪论<br /><p>    1.1论文背景和意义</p><p>    文件传输是当下移动平台需求量极大的功能之一。当下,<span style='color:red;'>随着移动终端设备,尤其是智能手机的越来普及,</span>数以万计的移动应用被开发出来,<span style='color:red;'>极大地丰富了人类的生活,移动互联网的时代已经到来。移动互联网已经渗透至每一个角落,与人类的生活、工作、学习息息相关,拉进了人们的距离,使得人与人的沟通变得从未有过的快捷、</span>方便,也极大地增加了人们相互沟通的频度。<span style='color:red;'>而文件的传输,在这个时代潮流中,也变得越来越频繁。</span>随之而来往往会碰到人与人之间需要共享某份资料时,受当时环境的限制,比较难以传递,比如网络环境较差的环境下,手机无法联网,或者现有的方式不能满足当时的情况,比如虽然可以通过QQ、微信等主流的社交软件可以传递资料,但临时性的接触不希望当时在QQ、微信上互加好友,或者文件较大,没有wifi,而流量资费比较贵等等。</p><p>    由于手机市场前景广阔,并且发展迅猛,不同厂商的定位跟出发点会有不同,使得手机操作系统也出现了不同的种类。从市场占有率来看,现在的主流手机<span style='color:red;'>操作系统大致上分为三类:Google旗下的Android,Apple旗下的iOS,以及微软旗下的Windows Phone。其中,Windows Phone的占有率,据Kantar于16年底发布,</span>在中国的市场份额已经跌至0.1%;Apple公司的iOS系统由于其封闭性,缺乏文件管理的功能,极其不便利,以及高昂的定价,市场份额在逐年下降;而谷歌研究院发布的Android操作系统由于其开源、易用等特性,深受市场追捧,牢牢占据着市场的主导地位。根据分析机构StatCounter发布,Android设备产生的流量在2017年3月首次超过了Windows PC,这标志着Android不仅是移动操作系统的霸主,还成为了全球第一大操作系统。因此,本文在手机系统的选择上,以Android为平台,进行软件的设计以及开发。</p><p>    <span style='color:red;'>由于Android操作系统的开源特性,Android的手机厂商如雨后春笋般的出现,各个厂商都可以对Android操作系统进行深度定制,</span>添加一些自定义的功能,<span style='color:red;'>使得手机的种类越来越多,功能也越来越多,文件的种类也越来越多,文件的容量也越来大。传统的传输方式有蓝牙,</span>但是不同设备的<span style='color:red;'>蓝牙版本很可能不同,这样,在多设备间的文件传输时候会造成许多问题,如传输速率过慢,传输信号不稳定,传输距离不符合条件等。</span>尽管在2016年6月,蓝牙联盟发布了蓝牙5,在有效传输距离上实现了交大的突破,理论上能达到300米,传输速度也达到了24Mbps,甚至还能结合wifi进行室内定位,但是目前支持的设备仍然不多,普及还需时日。另外的,<span style='color:red;'>还有一些文件传输方式,如NFC等,但是他们都或多或少存在一些缺陷,NFC传输类型单一,需要硬件支持等。这些文件传输的方式大都不能满足我们的日常需求</span>,因此,我们要寻找一个新的文件传输方式,<span style='color:red;'>使其能够满足我们的远距离、高速、稳定的要求,</span>并且<span style='color:red;'>能够支持传输多种文件的类型,以满足用户多样化的需求。</span></p><p>    <span style='color:red;'>WIFI(Wireless Fidelity,无线高保真),也是一种无线通讯协议,是由WiFi联盟指定的标准,</span>亦可以用IEEE <span style='color:red;'>802.11表示,与蓝牙一样,同属于短距离无线通信技术。</span>虽然WiFi在传输过程中的通讯质量不是很好,安全方面不如蓝牙,传输质量也有待改进,但是WiFi相较于蓝牙的最大优势是,高传输速度,<span style='color:red;'>以及不需要繁琐的配对。另外,通过这种方式,可以支持一对一直连,也可以实现多台设备同时连接。</span>正是因为其传输距离远远大过蓝牙技术的范围,并且传输速度更快,操作简单,用户友好等特性,成为传输方式的最佳选择。<br />1.2国内外研究历史与现状</p><p>    1.2.1文件传输研究历史</p><p>    蓝牙通信技术</p><p>    <span style='color:red;'>蓝牙技术最初由爱立信创制,该技术创始于爱立信公司的1994方案,它是研究在移动电话和其他配件之间进行低功耗、低成本的无线通信连接的方法。发明者希望为设备间的通讯创造一组统一的规则,即标准化协议,以解决用户间互不兼容的移动设备。</span></p><p>    <span style='color:red;'>蓝牙是一种无线技术标准,用来让固定与移动设备,在短距离间交换数据,以形成个人局域网(PAN)。其使用短波特高频(UHF)无线电波,经由2.4至2.485 GHz的ISM频段来进行通信。</span></p><p>    <span style='color:red;'>蓝牙的标准是IEEE 802.15.1,蓝牙协议工作在无需许可的ISM(Industrial Scientific Medical)频段的2.45GHz。最高速度可达723.1kb/s。为了避免干扰可能使用2.45GHz的其它协议,蓝牙协议将该频段划分成79个频道,(带宽为1MHz)每秒的频道转换可达1600次。</span></p><p>    <span style='color:red;'>蓝牙用于在不同的设备之间进行无线连接,例如连接计算机和外围设备,如:打印机、键盘等,又或让个人数码助理(PDA)与其它附近的PDA或计算机进行通信。具备蓝牙技术的手机可以连接到计算机、PDA甚至连接到免持听筒。当然,在手机间也能够进行相互传输,</span>例如,多媒体文件、office文档等。因此,蓝牙主要优点是,兼容性广阔、安全性强。</p><p>    只是,它在传输速度上,不尽如人意,在文件大小动辄几十兆的当代,显然不符合当今时代的用户需求。尽管最新的蓝牙5.0版本已于2016年6月被宣布,理论上,有效的传输距离上是4.2版本的4倍,大约可达300米,传输速度将是4.2版本的2倍(速度上限为24Mbps),<span style='color:red;'>甚至还支持室内导航的功能(结合WiFi可以实现精度小于1米的室内定位),允许无需配</span>对接收信标的数据(比如广告、Beacon、位置信息等,传输率提高了8倍)等等一系列的优点。然而,最新的蓝牙技术需要硬件的更新换代,目前支持蓝牙5.0的智能手机几乎没有,未来第一批的支持者必然是旗舰级别的智能手机,普及还需要一段时日。因此,基于蓝牙技术的文件传输未被本论文列入研究范围。<br />其他通信技术</p><p>    随后也出现了很多其他的文件传输技术,例如NFC、红外线等等。由于红外线传输对硬件设备的要求较高,并且其传输条件比较苛刻(由于红外线的直射特性,<span style='color:red;'>红外通讯多数情况下传输距离短、传输速率不高),很快就被其他的传输方式所取代。NFC(Near Field Communication)又称近距离无线通讯,是一种短距离的高频无锡通信技术,允许电子设备间进行非接触式点对点数据传输。顾名思义,</span>这种方式限制很大,只能在很近的范围内交换数据,实际上有效范围只有10厘米。不仅如此,<span style='color:red;'>其传输速率也很慢,其传输速度有106 Kbit/秒、212 Kbit/秒或者424 Kbit/秒三种。因此,在实际生活中,</span>NFC常常用于传输体量比较小的内容,比如名片、<span style='color:red;'>信用卡等,对于体量较大的文件传输,目前并不适用。</span><br />1.2.2 Android平台的研究现状</p><p>    WiFi hotspot,无线热点,是人们可以通过连接路由器的无线局域网而接入因特网的物理位置,hotspot与wifi ap不同,WiFi AP是一种提供无线网络的硬件设备,而hotspot往往是某个移动设备产生的,比如手机、平板等。此外,hotspot可以与连接设备进行通信,而WiFi AP往往只是作为一个硬件接入点,类似于路由器的功能。公共接入无线局域网(LAN)首先由HenrikSj&ouml;din在1993年8月在旧金山的Moscone中心的NetWorld + Interop会议上提出。[1] Sj&ouml;din并没有使用术语热点,而是使用可公开访问的无线局域网。</p><p>    尝试创建公共局域网接入网络的第一个商业企业是在得克萨斯州理查森(Texas)理事会成立的公司,被称为PLANCOM(公共局域网通信)。创业者Mark Goode,Greg Jackson和Brett Stewart于1998年解散了该公司,而Goode和Jackson则创建了MobileStar Networks。该公司是第一个签署星巴克、美国航空公司和希尔顿酒店等公共接入地点。该公司于2001年被卖给德意志电讯公司,后者将该公司的名称改为&quot;T-Mobile Hotspot&quot;。那么那个时候,&quot;热点&quot;一词就进入流行的白话,作为一个可以公开访问的无线局域网可用的位置的参考。</p><p>    <span style='color:red;'>热点常常被人们用来接入因特网,比如自己的手机或者电脑无法上网,</span>可以连接他人开启的热点进行上网。然而它还有一个很棒的功能,就是用来进行局域网通讯。在这个热点创建的局域网中,所有连接的设备可以直接与连入这个热点的设备进行通信,其实就是局域网通讯,如果有配套的软件,有时候或许能解决许多意想不到的事情,比如,户外野炊,好友之间或许需要及时地分享照片,然而可能流量资费比较贵,多数人会选择回家后再分享。如果这时有个局域网通讯的APP,通过这个APP就能够快速的分享文件,会增加不少乐趣,只是多数人没有注意到。<br />1.3主要研究内容</p><p>    <span style='color:red;'>本文主要论述了本系统的设计和开发,本系统基于Android平台,</span>致力于设计并实现一个快速的、稳定的、便捷的基于C/S模式的快速文件传递APP。主要技术有Socket通信、声波传输等。在准备了大量的文件传输、Socket编程和声波传输的相关理论和核心技术的前提下,着重研究了局域网的环境下,进行端到端的文件传输。总体来说,基于C/S的快速文件传递APP可以总结成下图(图1.1)所示的几个关键流程。在深入了解了各个关键步骤后,将在eclipse adt这一开发平台下<span style='color:red;'>,实现具体的文件传递与文件管理的功能,获取文件,传输文件,</span>管理文件。核心研讨的几个大方向如下:</p><p>    1)论述了近场、不通过外网的情况下,文件传输技术的发展历史以及现状,<span style='color:red;'>通过与蓝牙、红外、NFC等其他传输方式的比较,</span>总结出采用WiFi Hotspot技术进行文件传输的优势;</p><p>    2)对本地文件获取并显示模块进行设计并实现,为用户选择文件提供用户接口,并为文件传输获取文件提供接口;</p><p>    3)对第三方的声波通信lib&mdash;&mdash;SinVoice进行研究和分析,运用它提供的API传输server端的ip地址,从而建立基于C/S模式的socket连接,为文件传输模块做准备;</p><p>    4)对wifi Hotspot进行深入的研究和分析,并用于文件传输的模块中;</p><p>    <span style='color:red;'>4)对文件管理模块,进行设计和实现,为用户提供对文件的删改、</span>再次传输等操作提供用户接口;<br />1.1文件传输关键流程</p><p>    1.4主要创新点</p><p>    1)设计并实现了完整的基于WiFi的文件传输功能。通过这些技术进行文件的传输,不仅快速,而且通信的距离相对较远,<span style='color:red;'>理论上传输距离可达100米,远远超过传统的蓝牙传输距离,</span>能够适应生活中的多种复杂的传输环境;</p><p>    2)设计并实现了基于C/S模式的文件传输体系结构,借助第三方的声波传输的库&mdash;&mdash;SinVoice,<span style='color:red;'>传输Server端的ip地址,Client端录音后,通过程序自动解析,并连接Server端,自动地建立Socket连接,</span>在人机交互上,减少了用户的操作,增强了用户的体验,相比传统的蓝牙技术的繁琐的配对操作,<span style='color:red;'>减少用户的学习成本,使得用户可以快速上手。</span></p><p>    本系统为人们在生活、工作、学习等情景中,方便、快速、稳定地传输文件具有极大的意义。首先,文件传输无需通过外网,这解决了目前流量资费较贵的问题,尽管李总理三次提及提速降费,然而实效不大。其次,在传输中,摒弃了传统的蓝牙等传输方式,选择了基于WiFi的方式进行文件的传输,这种方式快速、稳定。在当今,摄像头的成像素质越来越优秀,手机的存储空间也越来越大,随之而来的,文件的大小也越来越大,传统的文件传输的方式依然无法满足我们的需求,而基于WiFi的方式,在2.4Ghz的频段下,最高理论传输速度可达108Mbps,可以快速、稳定的传输文件。<br />1.5论文的结构安排</p><p>    论文共分章撰写,具体组织结构如下:</p><p>    <span style='color:red;'>第一章:绪论。介绍了论文的选题背景,阐述了人们对该软件的需求;</span>讨论了文件传输技术的研究历史和现状,以及本文的选题意义;讨论了平台的选择背景,由于Android平台具有开源、免费、用户友好等特性,快速超越了其他平台并占据了市场的主导地位;<span style='color:red;'>讨论了本文的主要研究内容,主要创新点以及本论文的主要工作和组织结构。</span></p><p>    第二章:专业知识和技术介绍<span style='color:red;'>。主要对本设计和开发中所用到的相关的专业知识和技术做了详细的介绍,并对其原理进行了详细的说明。主要包括以下几点:对开源的Android平台的系统结构做了基础的介绍、对第三方的SinVoice进行简要的介绍,</span>最后,介绍了在实现文件传输过程中,遇到的一些问题,以及相关技术的介绍,比如:MVC架构、Android内存优化,Android基础组件ViewPager的介绍等。</p><p>    <span style='color:red;'>第三章:系统需求分析。根据软件工程的基本要求,</span>对快速文件传递APP在功能上与非功能上进行详细地需求分析。在准确的了解和定位我们研究快速文件传递APP所需要的技术路线之后,进行完整的软件开发,<span style='color:red;'>同时做出符合实际情况的、完善的需求分析,</span>并在开发过程中,严格地遵照需求分析进行APP的实现。同时,在开发的过程中,为了方便后续的优化和维护,采用了MVC架构进行APP的开发。</p><p>    <span style='color:red;'>第四章:系统设计。根据系统需求分析,对快速文件传递APP进行概要设计和详细设计。</span>先列举出快速文件传递APP的总的结构、功能,然后对该系统进行可行性分析。对系统进行可行性分析之后,列举出快速文件传递APP实现所<span style='color:red;'>需要的子系统和索要完成的功能和非功能需求的清单列表,基于这个需求清单做出进一步的完善设计与分析,从而增加我们队整个系统的整体掌</span>握与把控。</p><p>    <span style='color:red;'>第五章:系统实现。根据需求分析和系统设计,对快速文件传递APP的各个模块的实现过程进行详细的阐述。同时,为了更有逻辑的进行实现,</span>以及后续的系统优化、维护等,遵循MVC架构,进行可持续性的开发。<br /><span style='color:red;'>第六章:总结与展望。根据这段时间的工作情况,</span>结合本论文的工作结果进行总结,并指出通过对本系统的设计与开发的收货,以及本系统存在的一些问题,最后是对文件传输技术未来的应用前景进行展望。</p><br />第二章 专业知识与技术介绍<br /><p>    <span style='color:red;'>本章主要介绍论文中用到的一些相关技术的简要介绍,为后续依据需求分析进行系统的设计与实现进行前期的技术准备。<br />2.1 Android</span></p><p>    2.1.1 Android简介</p><p>    Android,中文名称安卓,是一个基于Linux内核的开放源代码的移动操作系统,</p><p>    <span style='color:red;'>本义是指&quot;机器人&quot;,同时Android操作系统的图标也是一个机器人。它是由Google</span></p><p>    <span style='color:red;'>成立的Open Handset Alliance(OHA,开放手持设备联盟)持续领导与开发,主要<br />设计用于触屏移动设备如智能手机和平板电脑与其他便携式设备。</span></p><p>    <span style='color:red;'>最初,Android是由Andy Rubin等人开发制作,最初开发这个系统的目的是创</span></p><p>    <span style='color:red;'>建一个数码相机的先进操作系统;但是后来发现市场需求不够大,加上智能手机市</span></p><p>    <span style='color:red;'>场快速成长,于是,Android被改造为一款面向智能手机的操作系统。于2005年7</span></p><p>    <span style='color:red;'>月11日,被Google公司收购。2007年11月,Google与84家硬件制造商、软件开</span></p><p>    <span style='color:red;'>发商及电信运营商成立开放手持设备联盟来共同研发改良Android,随后,Google</span></p><p>    <span style='color:red;'>以Apache免费开放源代码许可证的授权方式,发布了Android的源代码,开放源代</span></p><p>    码加速了Android普及,根据分析机构StatCounter发布,Android设备产生的流量在2017年3月首次超过了Windows PC,这标志着Android不仅是移动操作系统的霸主,<span style='color:red;'>还成为了全球第一大操作系统。<br />2.1.2 Android发展历史</span></p><p>    <span style='color:red;'>2013年10月,Android之父Andy Rubin同其他人一起创办并发展了Android科技公司;</span></p><p>    <span style='color:red;'>2005年7月11日,Google公司收购了Android科技公司,所有Android公司的员工都被并入了Google;</span></p><p>    <span style='color:red;'>2007年11月5日,在Google公司的领导下,同84家硬件制造商、软件开发商以及电信运营商一起成立了开放手持设备联盟,共同致力于Android平台的研发和改良;</span></p><p>    <span style='color:red;'>2008年9月23日,发布了Android操作系统中的第一个正式版本;</span></p><p>    之后Android经历了版本的更迭换代,同时自发布日起,Android在移动市场就穷追猛打,市场占有率逐年快速增加。迄今为止,Android不仅成为了全球移动操作系统的霸主,更是超越了Windows PC,<span style='color:red;'>在全球操作系统中市场占有率高达37.93%,成为了全球第一大操作系统。</span><br />2.1.3 Android架构</p><p>    <span style='color:red;'>Android系统是基于Linux内核的,但是Android又并不是传统的Linux风格的一个规范或者分发版本,也不是一系列可重用的组件集成的,是对Linux内核进行精简后,</span>增加一些模块的软件系统,<span style='color:red;'>是由操作系统、中间件、用户界面和应用软件组成。相比于桌面系统,</span>Android更加轻巧、<span style='color:red;'>速度更快,总的来说,Android的系统结构主要分为四层,自顶向下分别是<br />1.应用程序(Applications)</span></p><p>    <span style='color:red;'>2.应用程序框架(Application Frameworks)</span></p><p>    <span style='color:red;'>3.系统运行库与Android虚拟机运行时(Libraries &amp; Android Runtime)<br />4. Linux内核(Linux Kernel)</span></p><p>    图2.1 Android系统结构图</p><p>    1.应用程序(Applications)</p><p>    <span style='color:red;'>Android会同一系列核心应用程序包一起发布,该应用程序包包括email客户端,</span></p><p>    <span style='color:red;'>SMS短消息程序,日历,地图,浏览器,联系人管理程序等。所有的应用程序都是使</span></p><p>    <span style='color:red;'>用JAVA语言编写的。本层的所有应用程序都是用Java编写的,通常开发人员就处<br /></span>在这一层。</p><p>    <span style='color:red;'>2.应用程序框架(Application Frameworks)</span></p><p>    <span style='color:red;'>对于开发人员来说,被接触最多的就是应用程序框架层。该框架设计简化了组件的重用,其中任何一个应用程序都可以发布自身的功能提供其他应用程序调用。该层提供了应用程序开发的各种API给外部访问,进行快速开发,这样简化了访问的需求,降低了开发难度。</span></p><p>    <span style='color:red;'>3.系统运行库与Android虚拟机运行时(Libraries &amp; Android Runtime)<br />该层包含了两个部分,程序库和Android虚拟机运行时库。</span></p><p>    <span style='color:red;'>程序库为C/C++库,这些库能被Android系统中不同的组件使用,它们通过Android应用程序框架为开发者提供服务。</span></p><p>    <span style='color:red;'>Android运行时环境提供了Java语言核心库的大多数功能。Dalvik与JVM不同,被设计成一个设备可以同时高效地运行多个虚拟机系统,每一个Android应用程序都拥有一个独立的Dalvik虚拟机实例。Dalvik虚拟机执行的是.dex类型的文件,改格式文件针对小内存做了优化,同时是基于寄存器的,</span>速度会比基于栈存储的JVM快一些。<br />4. Linux内核(Linux Kernel)</p><p>    <span style='color:red;'>这一层提供了基于Linux内核的核心系统服务,如安全性,进程管理,内存管理,网络协议和驱动模型。对于程序开发人员,该层为软件与硬件之间增加了一层抽象层,对程序员来说是透明的,使得在开发过程中不必要考虑底层硬件的细节。<br /></span>2.2 SinVoice</p><p>    SinVoice是一个提供声波编解码的第三方库,为多个主流平台提供接入,目前</p><p>    支持Android、iOS、Windows、Linux、OSX及其他嵌入式系统。<span style='color:red;'>目前声波通信已经在iphone和android中广泛的应用起来了,涉及到数据和文件传输,以及支付等众多领域。比如iphone中的 chirp,android中的茄子快传,支付宝的声波支付,小米快传等。这些传输技术大多都是使用声波作为握手信号,然后使用wifi或其他信道传输数据。比如茄子快传可能的实现为,接收方先建立wifi热点,然后将热点名称通过声波发送出去,发送方在收到声波后解码出wifi热点名称,然后自动链接热点并传输文件,整个过程不需要人工干预。这些程序的核心技术和难点在于声波通信,下面讲解声波通信原理。</span></p><p>    <span style='color:red;'>声波通信的原理其实比较简单,主要是用单频率声音信号对数据进行编码,然后播放这些单频率声音,接收方在收到声音后,识别出频率,然后根据频率解码出数据。比如:我们可以将1500HZ的正弦波对应数字1,1600HZ的正弦波对应数字2,1700HZ 的正弦波对应数字3。那么数字串3123就对应4段正弦波,规定每段正弦波持续100ms,则3123对应400毫秒的声音段。接收方录制声音,对收到的声音进行解析,识别出1700HZ,1500HZ,1600HZ,1700HZ四段正弦波频率,然后查找码本,解码出的数字就是3123。<br />2.3 MVC架构</span></p><p>    <span style='color:red;'>MVC模式(Model-View-Controller)是软件工程中的一种软件架构模式,把软件系统氛围三个基本部分:模型(Model)、视图(View)和控制器(Controller)。MVC模式的目的是实现一种动态的程序设计,是后续对程序的修改和扩展简化,并且使查询某一部分的重复利用成为可能。除此之外,此模式通过对复杂度的简化,使得查询结构更加直观,</span>便于开发人员阅读<span style='color:red;'>,使得开发时代码逻辑更加清晰,并方便后续对系统进行维护。便于UI界面部分的显示和业务逻辑,数据处理分开。MVC针对Android端的职责如下:</span></p><p>    <span style='color:red;'>M(模型)层:主要做一些业务逻辑的处理,比如数据库的存取操作,网络操作,复杂的算法,耗时的任务等;</span></p><p>    V(视图)层:主要包括xml布局,<span style='color:red;'>Activity中跟UI显示相关的部分,处理并显示Model层中的数据结果。</span></p><p>    C(控制)层:主要包括人机交互的处理,而Activity是处理这些的,因此可以认为Activity是控制器,处理用户输入,并向Model层发送数据请求等。</p><p>    MVC框架降低了耦合性。利用M<span style='color:red;'>VC框架是的视图层(V)和模型层(M)可以很好地分离,这样就达到了解耦的目的,减少模块之间代码的相互影响。</span></p><p>    <span style='color:red;'>调高了可扩展性。当MVC中某个部分需要改动时,其他的部分不需要修改,当天件新的需求时,代码可扩展就可以大大减少代码的修改率,</span>降低了其他模块重复开发的成本。</p><p>    职责划分明确。划分为三个主要模块,<span style='color:red;'>有利于代码的阅读,理清开发思路,同时有利于后期代码的优化和维护。</span><br />2.4 Android OOM</p><p>    OOM(OutOfMemory)内存溢出,是运行时异常,表示内存不足,在程序运行过程中,无法再分配空间给目标对象,gc(垃圾回收器)也无法回收足够的可用内存。而这,往往是因不良代码引起的。</p><p>    <span style='color:red;'>与Java采用的JVM不同,android采用dalvik的是虚拟机,会为每一个APP分配一个当虚拟机,并为其分配一定的内存空间,</span>也就是每个程序都在属于自己的进程中运行。这样即使某个应用程序由于不良代码引起内存泄漏,<span style='color:red;'>仅仅只会是自己进程被kill掉,不会影响其他进程;另一方面,系统为每一个应用程序分配了不同的内存上限,如果超过这个上限会被视为内存泄漏,</span>从而被kill掉。Dalvik Heap size因不同设备的RAM不同而有所差异,<span style='color:red;'>应用占用内存接近这个阀值,在尝试分配内存就会引起outofmemoryError的错误。</span><br />出现oom有几种情况:</p><p>    1.加载对象过大;</p><p>    2.作用域不一样,导致gc无法回收。某些资源在Activity生命周期之外,被引用了,<span style='color:red;'>主要针对静态变量的引用。如,非静态内部类会隐式的持有外部类的引用,Context泄漏;</span></p><p>    3.资源没有关闭。如Bitmap使用后没有recycle(),RegisterReceiver后未调用unregisterReceiver();<br />如何避免oom:</p><p>    1.减小对象的内存占用</p><p>    <span style='color:red;'>尽量减少新分配的对象占用内存的大小,尽量使用更加轻量的对象。如,使用更轻量的数据结构,</span>使用ArrayMap和SparseMap来代替HashMap <br />2.避免在Android里面使用Enum</p><p>    在官方文档中有提到,Enum经常需要两倍的静态常量的内存大小,因此需要严格避免<br />3.减小Bitmap对象的内存占用</p><p>    <span style='color:red;'>Bitmap是一个极容易消耗内存的大胖子,减小创建出来的Bitmap的内存占用是很有必要的。可以使用以下两个措施,</span></p><p>    <span style='color:red;'>inSampleSize 缩放比例,在把图片闯入内存之前,我们需要先计算出一个合适的缩放比例,避免不必要的大图载入;</span></p><p>    <span style='color:red;'>decode format,编码格式,选择不同的图片编码格式,对图片的大小有很大的差别。如,选择ARGB_8888/RBG_565/ARGB_4444/ALPHA_8,存在很大差异。</span></p><p>    其他的引起oom的原因,像作用域不一样和资源没有关闭,则需要开发人员在编写代码过程中仔细检查,检验逻辑是否有问题了。<br />2.5快速文件传递APP开发环境</p><p>    开发工具:eclipse adt</p><p>    开发平台:Windows 7</p><p>    开发语言:Java</p><p>    CPU:i54200M</p><p>    内存:12G</p><p>    硬盘:750G</p><p>    版本控制工具:SVN</p><p>    手机系统:小米4,android 5.0</p><br />第三章 系统需求分析<br /><p>    本章从快速文件传递APP的功能性需求和非功能性需求出发,对整个系统的需求进行可行性分析,形成明确的需求规格说明,为系统设计做准备。<br />3.1任务概述</p><p>    3.1.1目标</p><p>    <span style='color:red;'>随着移动互联网的普及,在工作、生活、学习中,</span>人们使用更多的设备已是手机。因此,人们经常需要通过手机共享某份资料,有时受当时环境的限制,或许会比较难以传递。比如网络环境较差的环境下,手机无法联接外网,或者现有的方式不能满足当时的情况,比如虽然可以通过QQ、微信等主流的社交软件可以传递资料,但临时性的接触不希望当时在QQ、微信上互加好友;或者文件较大,又恰好没有wifi,而流量资费比较贵等等。</p><p>    本项目旨在利用基于WiFi的局域网进行文件的传输,以支持对不同场景下,无论是否可以连接外部网络,用户之间都可以快速、稳定、<span style='color:red;'>便捷地分享文件。同时,提供了文件管理模块,方便用户对历史接收文件,</span>快捷地进行管理、再次分享等操作。<br />1)实现文件传输功能;</p><p>    2)实现文件管理功能;</p><p>    <span style='color:red;'>3)简化交互逻辑,减少用户学习成本,增加用户体验;</span></p><p>    4)改进项目代码,修复bug,提高程序稳定性。</p><p>    3.1.2用户特点</p><p>    本系统的受众范围比较广泛,主要针对用户无需使用因特网即可快速、稳定、高效地互相传递文件。比如,工作中,同事之间需要互传资料时,可能会遇到由于员工数量多,无法连接WiFi,而文件又比较大,使用传统的蓝牙传输,不仅传的比较慢,可能匹配的步骤也比较繁琐;生活中,或许会遇到不愿意透露社交账号,但是又急需互传文件等资料时,一时间苦于找不到合适的方式来解决等等情况。通过这款APP,我们可以很方便。快捷、稳定地传输文件,也无需考虑泄漏个人的信息等风险。<br />3.1.3假定和约束</p><p>    开发期限为三个月</p><p>    3.2需求规定</p><p>    3.2.1系统功能结构图</p><p>    图3.1系统功能框图</p><p>    3.2.2用例图</p><p>    图3.2系统用例图</p><p>    3.2.3用例描述</p><p>    表3.1用例分析</p><p>    用例编号用例名用例描述主要参与者</p><p>    <span style='color:red;'>SRS_case1发送文件用户点击发送按钮后,进入本地文件列表,选择完目标文件后点击完成即可进行发送用户</span></p><p>    <span style='color:red;'>SRS_case2接收文件用户点击接收按钮后,进入发送页面,</span>后台自动完成与发送方的连接并获取文件</p><p>    SRS_case3历史文件管理用户可以在APP中,对历史接收到的文件进行删改等操作,还可以进行再次分享操作<br />3.3详细功能需求</p><p>    快速文件传递APP主要实现了发送模块、接收模块以及历史文件管理模块。要求能够快速、稳定、方便地实现文件的互传,并且能够方便地对历史接收文件进行管理。不仅仅在文件传输上要求高效,还需要在人机交互的逻辑上,<span style='color:red;'>减少用户的操作,尽可能减少用户的学习成本,从而提高用户的体验。</span><br />3.3.1发送文件(SRS_case1)功能需求分析</p><p>    <span style='color:red;'>发送文件过程中,用户先选择我要发送按钮,然后跳转到文件列表页面,该页面对本地文件进行分类,方便用户进行快速的选择目标文件。</span>用户在文件列表页面完成目标文件的选择之后,可以点击完成进行文件的传递。这个用例的人机交互流程图如下:<br />表3.2发送文件功能清单</p><p>    子功能子功能描述所属用例</p><p>    <span style='color:red;'>点击发送按钮点击发送按钮,进入文件列表页面发送文件</span></p><p>    显示本地文件列表在文件列表页面,读取本地文件并进行,方便用户快速选择</p><p>    选择文件用户可以选择发送一个或多个文件</p><p>    发送文件用户选择完文件后,无需再操作,程序会在后台自动完成发送操作。先创建server,再通过声波发送ip,接收方接收到之后,会自动连接,连接成功时候便会传输文件。<br />图3.3发送文件流程图</p><p>    3.3.2接收文件(SRS_case2)功能需求分析</p><p>    <span style='color:red;'>接收文件过程中,用户先选择我要接收按钮,</span>然后跳转到接收页面,同时打开麦克风,准备录音。在发送端发送完声波后,<span style='color:red;'>对录音进行解析,获取server端的ip,通过该ip去连接server,连接成功后,进行文件的传输。接收方读取文件流并写入到本地。</span>这个过程的人机交互流程图如下:<br />表3.3接收文件功能清单</p><p>    子功能子功能描述所属用例</p><p>    选择传输方式用户可以选择通过蓝牙或局域网进行接收文件手机与手机传输</p><p>    自动连接接收方会自动获取连接信息,并自动连接发送方</p><p>    自动接收双方连接成功后,能自动接收文件</p><p>    自动分类接收方获取到文件后,<span style='color:red;'>能自动将文件分类,并存放在固定的历史接收文件的文件夹下,</span>方便用户查找<br />图3.4接收文件流程图</p><p>    3.3.3历史文件管理(SRS_case3)功能需求分析</p><p>    为了方便用户对历史接收文件进行管理、再次分享等,本模块将用户历史接收的文件,进行了获取并展示,<span style='color:red;'>方便用户对文件进行管理,主要提供了复制、</span>粘贴、再次分享等功能。<br />表3.4文件管理清单</p><p>    子功能子功能描述所属用例</p><p>    文件复制能够复制目标文件手机端</p><p>    文件管理功能</p><p>    剪切能够剪切目标文件</p><p>    粘贴能够粘贴已经复制或者剪切的目标文件</p><p>    重命名能对目标文件进行重命名</p><p>    复制路径能复制文件的路径,方便用户去系统文件管理器查找</p><p>    无网发送能将用户选中的历史文件再次通过本APP发送给他人</p><p>    有网发送能将用户选中的历史文件通过因特网发送给QQ或微信等好友</p><p>    文件详情能获取文件的详细信息,并展示给用户</p><p>    <span style='color:red;'>侧滑删除能删除用户选中的目标文件</span></p><p>    图3.5文件管理流程图</p><p>    删除文件的活动图</p><p>    图3.6&quot;删除文件&quot;活动图</p><p>    3.4非功能性需求</p><p>    3.4.1易用性需求</p><p>    软件功能界面友好,方便用户使用。</p><p>    可视化效果展现直观丰富。</p><p>    3.4.2可靠性和可用性需求</p><p>    <span style='color:red;'>软件可以每天使用24小时,每年使用365天。</span></p><p>    <span style='color:red;'>系统中软件故障小于等于5%。</span></p><p>    3.4.3其他专门要求</p><p>    <span style='color:red;'>能够保证数据的独立性。数据和程序相互独立有利于加快软件开发速度,节省开发费用;<br />冗余数据少,数据共享程度高;</span></p><p>    <span style='color:red;'>冗余代码少,代码复用率高;</span></p><p>    <span style='color:red;'>系统的用户接口简单,用户容易上手,易于掌握,使用方便;</span></p><p>    <span style='color:red;'>能够确保系统运行可靠,出现故障时能迅速排除;能够防止错误数据的产生,一旦产生也能及时发现;<br />具有可修改性和可扩充性;</span></p><p>    3.5运行环境规定</p><p>    3.5.1硬件环境</p><p>    网络类型:通用局域网</p><p>    <span style='color:red;'>存储容量:内存容量:不少于2GB,外存容量:16GB以上</span></p><p>    手机类型:普通Android手机</p><p>    3.5.2支撑软件</p><p>    手机操作系统:Android 4.3及以上</p><p>    存储选项:外部存储,内部存储,Sqlite数据库</p><br />第四章 系统设计<br /><p>    <span style='color:red;'>本章在上一章需求分析的基础上,进行系统设计。</span>在系统设计阶段,主要确定具体的软件体系结构,<span style='color:red;'>系统的架构模式,系统各个模块的功能,以及对所用到的技术进行阐述。<br />4.1系统体系结构设计</span></p><p>    依据需求分析,快速文件传递APP,是基于WiFi局域网通信,是通过近距离的无线射频信号进行信息传递的方式。因此,<span style='color:red;'>本系统的先决条件是同时,同地,不同设备。</span>按照上一章的需求分析,可设计如下系统结构:<br />整个系统模块如下图:</p><p>    图4.1系统模块图</p><p>    4.1.1系统结构</p><p>    图4.2系统结构图</p><p>    4.1.2设备之间的传输体系</p><p>    图4.3设备间传输文件结构图</p><p>    4.2各模块功能设计</p><p>    4.2.1设备连接模块</p><p>    连接分为两个部分,一个是发送端通过声波发送自己的ip,然后接收端录音并解析ip;另一个是C/S连接模块,接收端获取到发送端的ip后,通过ip和事先规定的端口号进行连接的一个模块。<br />发送和解析声波</p><p>    这一模块,主要利用了第三方的库&mdash;&mdash;SinVoice来实现,根据提供的API,可以完成如下发送声波的部分:<br />图4.4获取ip</p><p>    图4.5发送声波</p><p>    图4.6开始接收声波</p><p>    图4.7解析声波</p><p>    图4.8存储每次的解析结果</p><p>    图4.9依据协议解析声波内容并获取ip</p><p>    这一模块的设计思路是,<span style='color:red;'>发送方先获取本机的ip,然后自定义协议内容,</span>之后通过声波发送这段协议;接收方则开启录音,利用SinVoice提供的API解析这段声波,通过监听回调获取解析结果。最后依据协议,解析声波内容,获取server的ip。协议内容,wifi名字:ip <br />C/S连接</p><p>    这一部分主要负责Server的创建,Client依据声波模块获取的ip以及设计好<br />的固定端口号,与server端进行连接。设计如下:</p><p>    发送端(即服务端):</p><p>    4.10关闭WiFi</p><p>    图4.11根据配置创建WiFi hotspot</p><p>    图4.12创建server</p><p>    接收端(即客户端):</p><p>    4.13根据声波模块解析出的WiFi的ssid连接目标WiFi</p><p>    图4.14依据声波通信解析出的ip连接server</p><p>    C/S连接模块,发送方需要先关闭wifi连接,而后依据配置创建WiFi Hotspot,而后创建server;接收方则依据声波通信模块解析出的WiFi的ssid连接目标WiFi,然后依据解析出的ip连接server,至此C/S连接成功。<br />4.2.2传输模块</p><p>    发送方(即服务器)</p><p>    <span style='color:red;'>图4.15获取客户端发送文件的请求,并发送文件</span></p><p>    接收方(即客户端)</p><p>    图4.15客户端请求发送文件,读取并处理文件流</p><p>    4.2.3文件管理模块</p><p>    <span style='color:red;'>这个模块主要对文件进行管理,包括文件的分类,</span>文件的删改,文件的复制、剪切等一系列文件操作。<br />图4.16文件分类</p><p>    图4.17打开文件</p><p>    图4.18文件排序图4.19文件操作帮助类</p><p>    定义了文件操作帮助类,使得对与UI无关的文件的操作在逻辑上得到了统一,<span style='color:red;'>有利于理清代码逻辑,利于后续代码的编写与维护,提高代码的复用率,减少代码冗余。<br />4.3可靠性设计</span></p><p>    在可靠性方面,本软件基于Socket通信,<span style='color:red;'>将目标文件转换成输入、输出流进行传输,socket则是对TCP/IP协议的封装和应用。众所周知,TCP是属于传输层的一种协议,一种可靠的、无差的网络传输协议。</span><br />4.4用户界面设计</p><p>    1.文件传输页面,<span style='color:red;'>需要提供发送、接收按钮。在本软件中,无论是发送方,</span>还是接收方,操作都很少,减少用户的学习成本。发送方,<span style='color:red;'>只需点击发送,继而选择目标文件,最后点击完成即可完成发送操作;</span>接收方则更加简单,只需点击接收,然后依据权限提示,打开录音功能即可。剩下的,连接收发双发的操作,文件的写入目录等,<span style='color:red;'>均由程序自动完成,无需用户任何操作。同时,</span>本软件还设计有传输过程的动画,优雅舒适,增加用户使用的愉悦感。</p><p>    2.历史文件管理页面,为了快速、方便、明了的对历史文件进行管理,需要对文件进行分类。同时,为了减少用户学习的成本,需要对文件操作的交互进行简化,为此,我们设计了对目标文件长按,即可唤出文件操作列表,方便,易用。对文件的删除,我们加入了侧滑删除的模块,操作简便、明了,延续用户的使用习惯,增进人机交互体验。<br />更新进度动画</p><p>    4.5故障处理说明</p><p>    出错名称系统输出信息处理方法</p><p>    <span style='color:red;'>文件复制错误&quot;不能复制文件夹,请重新选择!</span>&quot;保持在文件选择页面</p><p>    连接失败&quot;连接超时,请重新连接!&quot;进入等待连接页面</p><br />第五章 系统实现<br /><p>    5.1类图</p><p>    5.1.1连接模块类图</p><p>    图5.1连接模块类图</p><p>    5.1.2服务器与客户端类图</p><p>    图5.2服务器与客户端类图</p><p>    5.1.3文件管理类图</p><p>    文件删改、再次分享等操作</p><p>    图5.3文件管理类图</p><p>    5.2代码介绍</p><p>    5.2.1声波发送</p><p>    为了使连接稳定,在进入onCreate()方法之后,即立即先关闭wifi,启动wifi hotspot,然后启服务器,率先启动服务器。在onResume()方法中,开启循环等待wifi hotspot启动,为了避免死循环破坏用户体验,每次循环都失眠一百毫秒,然后循环超过20次,就退出循环。接着马上执行发送声波的代码,把服务器IP通过声波发送出去<br />5.2.2声波接收</p><p>    相应的,为了确保能够连接到服务器的AP,不管客户端有没有启动wifi hotspot,都先做个判断,把wifi hotspot关闭,然后打开wifi,在onResume()中开启线程调用接收声波的代码,接受服务器发来的信息,然后通过Handler把消息加入到MessageQueue,转到主线程UI,然后开启线程连接服务器的wifi <span style='color:red;'>hotspot,在循环中连接,连接成功或者连接时间超时,才跳出循环。<br />5.3界面</span></p><p>    5.3.1主界面</p><p>    5..4主界面</p><p>    5.3.2文件传输</p><p>    发送方</p><p>    5.5发送方选择文件5.6发送方选择完文件,等待接收方连接</p><p>    接收方</p><p>    5.7接收方连接发送方</p><p>    连接成功后,进入传输页面</p><p>    5.8传输页面</p><p>    5.3.3文件管理页面</p><p>    5.9历史文件管理页面5.10侧滑删除</p><p>    长按,即可唤出文件操作列表</p><p>    5.11文件操作列表</p><br />第六章 总结和展望<br /><p>    <span style='color:red;'>本章介绍了本论文的工作总结和本文存在的一些不足以及对未来这方面的一些发展设想。<br /></span>6.1总结</p><p>    在寻找并储备了接近一年的关于快速文件传递方面的专业知识,<span style='color:red;'>经过了这几个月来的不懈努力,基于WiFi的局域网通讯的Android平台下的快速文件传递APP终于比较</span>好的实现了。期间,遇到了不少问题,也发现了一些新的技术,有时候很希望将这些新技术整合到项目中,<span style='color:red;'>但是由于种种原因,没能实现,对此深表遗憾。</span>同时,也为自己遇到问题能做到不放弃,不抛弃,勇于正视问题,解决问题而感到骄傲。通过本项目,对Java和A<span style='color:red;'>ndroid有了更多更深入的了解,比如MVC架构、Android中的常用UI组件和它们的样式、四大组件的使用等内容。</span></p><p>    尽管,这款APP仍然存在一定的问题、界面等仍有优化的空间,但这不会影响这款软件能做到解决用户的痛点这一特质,更不会打消我继续深入学习Android开发和网络通信的兴趣。我也很开心,这款软件仍存在问题,这能够让我发现我的不足之处,指引并激励我不断的努力学习来弥补我的不足和完善我的知识体系。<br />6.2展望</p><p>    本系统主要存在以下几个问题:</p><p>    1.在通信上,Google早在Android4.0中便引入了WiFi Peer-to-Peer API,</p><p>    供开发者使用,能够做到更快速、更高效,在立项时没有了解到,有些遗憾。希望在项目重构时,可以将技术更新为这个。</p><p>    2.由于设计不到位,以及时间的关系,我在界面上做的不够优美,没能达到赏<br />心悦目的地步。</p><p>    在以后的学习、工作中我会继续对新技术,新知识保持一颗渴望的心,不断学习并努力加以运用,希望早日成为理想中的自己。</p><p class='uncheck'>参考文献</p><p class='uncheck'>    </p><p class='uncheck'>    [1] 余志龙，陈小凤，余志龙，陈小凤.AndroidSDK开发范例大[M].北京：清华大学出版社，2010.</p><p class='uncheck'>    [2] 蒋东兴.Windows Socket程序设计指南[M].北京：清华大学出版社，1995.</p><p class='uncheck'>    [3] 谢希仁.计算机网络[M].大连：大连理工大学出版社，1996.</p><p class='uncheck'>    [4] 霍斯特曼.JAVA核心技术卷1[M].机械工业出版社，2008.</p><p class='uncheck'>    [5] 霍斯特曼.JAVA核心技术卷2[M].机械工业出版社，2008.</p><p class='uncheck'>    [6] 255-260,324-328 Dave MacLean, Dave MacLean.精通Android3[M].北京：人民邮电出版社，2011.</p><p class='uncheck'>    [7] Gourley.HTTP权威指南[M].北京:人民邮电出版社,2012.9. </p><p class='uncheck'>    [8] 陈文，郭依正.深入理解Android网络编程：技术详解与最佳时间[M].北京：机械工业出版社， 2013.</p><p class='uncheck'>    [9] 上野 宣.图解HTTP[M].北京.人民邮电出版社,2014-05.</p><p class='uncheck'>    [10] W.Richard Stevens.计算机科学丛书 TCP/IP详解卷1：协议[M].机械工业出版社,2014-06.</p><p class='uncheck'>    [11] W.Richard Stevens.计算机科学丛书 TCP/IP详解卷2：实现[M].机械工业出版社,2014-06.</p><p class='uncheck'>    [12] W.Richard Stevens.计算机科学丛书 TCP/IP详解卷3：TCP 事务协议、HTTP、NNTP和UNIX域协议[M].机械工业出版社,2014-06.</p><p class='uncheck'>    [13] 208289 顾浩鑫.Android高级进阶[M].北京:电子工业出版社，2016.10.</p><p class='uncheck'>    [14] 闫伟，叶建栲.多线程技术在android手机开发中的应用[J].信息通信，2012(1):46-47.</p><p class='uncheck'>    [15] 1009-4067(2012)06-114-02 石建华 聂文芳 文晓棠, 石建华 聂文芳 文晓棠.基于Android平台多线程断点续传技术研究[J].科技研究，2012(06):中国电子商务114-中国电子商务1151.</p><p class='uncheck'>    [16] 1009-3044(2013)18-4251-04 杨杰，杨杰.基于Android的多线程处理技术[J].ISSN 1009-3044，2013：软件设计开发4251-软件设计开发4254.</p><p class='uncheck'>    [17] 1008-6072(2012)06-0059-04 周兵，周兵.基于Android的多线程断点下载的研究与实现[N].郧阳师范高等专科学校学报，2012年12月，第32卷第6期.</p><p class='uncheck'>    [18]Shane Conde.Android Wireless Application Development</p><p class='uncheck'>    [M].Addison-Wesley,2010</p><p class='uncheck'>    [19] 1530-1436 P.Nevers ,S.Sargento, R.L.Aguiar .Support of Real-Time Services over Integrated 802.16 Metropolitan and Local Area Networks[J].Computers and Communications，2006.ISCC’06.Proceedings.11th IEEE Symposium on</p><p class='uncheck'>    [20] 0163-6804 Dusit niyato，Ekram Hossain，Dusit niyato，Ekram Hossain. WIRELESS BROADBAND ACCESS: WIMAX AND BEYOND - Integration of WiMAX and WiFi: </p><p class='uncheck'>    Optimal Pricing for Bandwidth Sharing[J].IEEE Communications Magazine,2007(May):Volume:45,Issue:5</p><p class='uncheck'>    [21] W.Richard Stevens.计算机科学丛书 TCP/IP详解卷1：协议[M].机械工业出版社,2014-06 </p><p class='uncheck'>    [22] Android Developers，https://developer.android.com/index.html</p><p class='uncheck'>    [23] TCP/IP 简介，http://www.w3school.com.cn/tcpip/tcpip_intro.asp</p><p class='uncheck'>    [24] 孔蕴藉.VPN技术发展趋势，www.21ctn.com.news.04-0209/c12.htm</p><p class='uncheck'>    [25] 蓝牙定义，https://zh.wikipedia.org/wiki/%E8%97%8D%E7%89%99</p><p class='uncheck'>    [26] Android 定义，https://zh.wikipedia.org/wiki/%E8%97%8D%E7%89%99</p><p class='uncheck'>    [27] Android 历史版本，</p><p class='uncheck'>    https://zh.wikipedia.org/wiki/%E8%97%8D%E7%89%99</p><p class='uncheck'>    [28] Android系统架构，</p><p class='uncheck'>    https://hit-alibaba.github.io/interview/Android/basic/Android-Arch.html</p><p class='uncheck'>    [29] MVC定义，https://zh.wikipedia.org/wiki/MVC</p><p class='uncheck'>    </p><p class='uncheck'>    </p><p class='uncheck'>    </p><p class='uncheck'>     </p><p class='uncheck'>    谢 辞</p><p class='uncheck'>    时光飞逝，岁月留痕，转眼间本科四年即将结束了，往昔犹如昨日，历历在目。在这四年中，有太多值得回味、值得追忆、值得珍惜的时光。这份毕业设计凝聚着我本科的所学知识以及将近一年的心血来准备和学习相关知识，并运用到实践中。这份毕设为我的学习生涯交了一份满意的答卷，也是我将来职业生涯的开端。</p><p class='uncheck'>    感谢我的导师余颖老师。从最初论文的选题，需求分析，系统设计，论文的编写等，始终给予我最真切的指导，对我的这一年的学习和生活也做了不少关怀和帮助。在这期间，她花费了大量的宝贵的时间和精力，为我的论文的写作，修改，到最终的定稿做出了很大的指导和实质性的意见。借此机会，向她表示由衷的感谢，此外，她严谨的治学态度，扎实的专业基础，以及耐心的传道授业解惑，使我印象深刻，让我学到了许多为人处世方面的价值观和方法，必将是我受益终身。</p><p class='uncheck'>    感谢四年来给我关心和支持的各位老师，给我提供帮助的各位学长学姐，他们不仅交给我许许多多的专业知识，还教会了我面对问题不恐惧，用于正视问题，学习分析问题、解决问题的方法以及独立思考，开拓创新的能力。在实现本系统时，之前与我一起参加比赛的同学给予了我很大的帮助，尤其是吴洪全同学，经常深更半夜一起讨论，非常感谢。借此机会，对大家表示衷心的感谢！</p><p class='uncheck'>    感谢在校期间，有一个这样的团队——Geowind，在这里学生自主管理，我学会了独立；在这里学长带领学弟，给了我很大的学习帮助和成长的空间;在这里，经常关注一些赛事，与小伙伴一起组队参赛，让我成长了许多，见识了许多，还结交了许多志同道合的朋友，非常感谢！感谢在帆软的实习经历，给了我许多锻炼和学习的机会，感谢我的同事，帮助我克服一个又一个困难！</p><p class='uncheck'>    最后要感谢背后一直默默支持我的父母，是您们让我无忧无虑的学习和生活，是我的精神支柱，无论发生了什么，都会帮我排忧解难，在此，深深感谢！</p><p class='uncheck'>    最后，向今天参与我论文评审的各位老师致以深深的敬意，谢谢你们的辛勤工作！</p><br />
</body>
</html>

